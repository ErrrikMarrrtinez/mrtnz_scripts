-----
MDAT = {
    def_spacing = 5,
    def_padding = 5,
    def_bg      = "#4a4a4a",
    def_bcol    = "#4e4e4e",
    table_buttons = {},
    spacers = {},
    vboxes_list = {},
    widget_texts = {},
    icons_tab = {ic.filename, ic.time, ic.folder, ic.mem},
    
  }
   




function lumus(color, br)
    local h, s, v, a = rtk.color.hsv(color)
    local new_v = math.min(v * br, 1.0)
    local r, g, b, a = rtk.color.hsv2rgb(h, s, new_v, a)
    return rtk.color.rgba2hex(r, g, b, a)
end

function GetChilds(box, t)
    local childs = {}
    for i, elems in ipairs(box.children) do
        local elem = elems[t]
        table.insert(childs, elem)
    end
    return childs
end

function Container(params)
    local container = rtk.Container(params)
    container:add(BgRoundrect{round=params.round, ref='bg', color=params.color}, {fillw=true, fillh=true})
    return container
end

function Box(params, _type)
    local tab = {}
    tab.cont = Container(params)
    params.padding = tab.cont.refs.bg.round / 3
    local box = _type == 'VB' and rtk.VBox or rtk.HBox
    tab.vb = tab.cont:add(box{padding=params.padding}, {fillw=true, fillh=true})
    return tab
end

function find_index(tbl, value)
    for index, val in ipairs(tbl) do
        if val == value then
            return index
        end
    end
    return nil
end

function ActiveSpacer()
   for i = 1, #MDAT.spacers do
       if MDAT.spacers[i].mouseover or MDAT.spacers[i].dragging then
           return true
       end
   end
   return false
end
    
function RoundButtonIc(h, text, icon, halign, i)

    local container = Container( {z=5, x=-0.2,round=9, color='transparent'}, 'HB')
    local hbox = container:add(rtk.HBox{},{fillw=true})
    local circ_button = hbox:add(
        rtk.Button{
            flat = true,
            icon = icon,
            tagged=true,
            padding=0,
            w=25,
            x=3,
            surface=false,
            "",
        },{
            fillh=true,
            halign='center',
        })
        
    hbox:add(rtk.Text{fontflags=rtk.font.BOLD, x=5, text=text, valign='center'},{fillh=true})

    local function mouseenter()
        if container.mouseover and not ActiveSpacer() then
            container.refs.bg:attr('color', '#4a4a4a')
        else
            container.refs.bg:attr('color', 'transparent')
        end
        rtk.defer(mouseenter)
    end
    
    rtk.defer(mouseenter)
    
    return container
end


function CreateSpacer(index, hbox_heading, buttons)
    local spacer = rtk.Spacer{hotzone=3.5, autofocus=true, x=0.9, cursor = rtk.mouse.cursors.SIZE_EW, z = 2, w = 4.5, bg = 'transparent'}
    
    spacer.ondragstart = function(self, event)
        self.dragging = true
        self.start_x = event.x
        self.start_widths = {}
        for i, button in ipairs(buttons) do
            self.start_widths[i] = button.calc.w
        end
        return true
    end
    
    spacer.ondragmousemove = function(self, event)
        if self.dragging then
            local delta_x = event.x - self.start_x
            local total_width = hbox_heading.calc.w
            local left_index = index
            local right_index = index + 1

            local new_left_width = rtk.clamp(self.start_widths[left_index] + delta_x, 20, total_width - 20)
            local new_right_width = rtk.clamp(self.start_widths[right_index] - delta_x, 20, total_width - 20)
            
            local total_expand = #buttons
            local new_left_expand = rtk.clamp(new_left_width / total_width * total_expand, 0.19, 2)
            local new_right_expand = rtk.clamp(new_right_width / total_width * total_expand, 0.19, 2)
            hbox_heading:update(buttons[left_index], {expand = new_left_expand}, true)
            hbox_heading:update(buttons[right_index], {expand = new_right_expand}, true)
            
            MDAT.hbox_lists:update(MDAT.vboxes_list[right_index], {expand = new_right_expand}, true)
            MDAT.hbox_lists:update(MDAT.vboxes_list[left_index], {expand = new_left_expand}, true)
        end
    end
    
    spacer.ondragend = function(self, event)
        self.dragging = false
    end
    
    spacer.onmouseenter = function(self, event)
        self:attr('bg', '#4a4a4a')
        return true
    end
    
    spacer.onmouseleave = function(self, event)
        self:attr('bg', 'transparent')
    end
    MDAT.spacers[index] = spacer 
    return spacer
end

function TableBox()
    local table_list = {'file name', 'date', 'path', 'size'}
    
    
    local cont = Container({  ref='cont', color=MDAT.def_bg })
    local vbox = cont:add(rtk.VBox{ref='vb'}, {fillh=true})
    local heading = vbox:add(Container({h=45, ref='heading', color=shift_color(MDAT.def_bg, nil, nil, 1.2)}))
    local hiden_line = heading:add(rtk.Spacer{tmargin=heading.calc.h - cont.refs.bg.round, h=heading.calc.h / 2, bg=MDAT.def_bg}, {fillw=true})
    local hbox_heading = heading:add(rtk.HBox{lmargin=2, rmargin=2, spacing=-1,y=-1, padding=3, ref='hb_head', z=1, h=hiden_line.calc.tmargin}, {fillw=true})
    
    local main_vb_list = rtk.VBox{}
    
    local main_vb_viewport = vbox:add(rtk.Viewport{padding=2,y=-9,scroll_left = 0,scroll_top=25,autofocus=true, smoothscroll=true, child=main_vb_list},{fillw=true, fillh=true})
    
    local container_test = main_vb_list:add(rtk.Container{})
    
    MDAT.hbox_lists = container_test:add(rtk.HBox{z=5},{})
    
    
    for i, elem in ipairs(table_list) do
        MDAT.table_buttons[i] = hbox_heading:add(
            RoundButtonIc(
                hiden_line.calc.tmargin - 4, 
                elem:upper(), 
                MDAT.icons_tab[i], 
                'center',
                i
            ),{
            fillw = true,
            expand = 1
        })
        
        if i ~= #table_list then
            local spacer = CreateSpacer(i, hbox_heading, MDAT.table_buttons)
            hbox_heading:add(spacer, {fillh = true})
        end
        
        MDAT.vboxes_list[i] = MDAT.hbox_lists:add(rtk.VBox{}, {fillw=true, expand = 1})
    end
    
    for _i, path in ipairs(sorted_paths) do
        local n = new_paths[path]
        MDAT.widget_texts[_i] = {}
        MDAT.widget_texts[_i][1] = MDAT.vboxes_list[1]:add(rtk.Text{text=n.filename},{fillw=true})
        MDAT.widget_texts[_i][2] = MDAT.vboxes_list[2]:add(rtk.Text{text=n.form_date},{fillw=true})
        MDAT.widget_texts[_i][3] = MDAT.vboxes_list[3]:add(rtk.Text{text=n.path},{fillw=true})
        MDAT.widget_texts[_i][4] = MDAT.vboxes_list[4]:add(rtk.Text{text=n.form_size},{fillw=true})
    
        local onmouseenter = function(self,event)
            for _, widget in ipairs(MDAT.widget_texts[_i]) do
                widget:attr('bg', 'orange#50')
            end
            return true
        end
    
        local onmouseleave = function(self,event)
            for _, widget in ipairs(MDAT.widget_texts[_i]) do
                widget:attr('bg', false)
            end
        end
    
        for _, widget in ipairs(MDAT.widget_texts[_i]) do
            widget.onmouseenter = onmouseenter
            widget.onmouseleave = onmouseleave
        end
    end
    return cont
end
